import rimraf from "rimraf";
import gulp from "gulp";
import postcss from "gulp-postcss";
import htmlMinify from "html-minifier";
import uglify from "gulp-uglify";
import imagemin from "gulp-imagemin";

const { src, dest, series, parallel } = gulp;

async function clean(cb) {
  await rimraf("./dist");
  cb();
}

function optimizeCss() {
  return src("./src/assets/css/*.css")
    .pipe(postcss())
    .pipe(dest("./dist/assets/css"));
}

const htmlOptions = {
  includeAutoGeneratedTags: true,
  removeAttributeQuotes: true,
  removeComments: true,
  removeRedundantAttributes: true,
  removeScriptTypeAttributes: true,
  removeStyleLinkTypeAttributes: true,
  sortClassName: true,
  useShortDoctype: true,
  collapseWhitespace: true,
  minifyCSS: true,
  minifyJS: true,
};

function optimizeHtml() {
  return src("./src/*.html")
    .on("data", function (file) {
      const buferFile = Buffer.from(
        htmlMinify.minify(file.contents.toString(), htmlOptions)
      );
      return (file.contents = buferFile);
    })
    .pipe(dest("./dist"));
}

function buildJavascript() {
  return src("./src/assets/js/*.js")
    .pipe(uglify())
    .pipe(dest("./dist/assets/js"));
}

function optimizeImages() {
  return src("./src/assets/images/*")
    .pipe(imagemin())
    .pipe(dest("./dist/assets/images"));
}

function copyAssets() {
  return src("./src/assets/**/*").pipe(dest("./dist/assets"));
}

async function finish(cb) {
  await rimraf("./dist/assets/images/MediaCreationTool22H2.exe");
  cb();
}

const optimize = series(
  copyAssets,
  parallel(optimizeCss, optimizeHtml, buildJavascript),
  finish
);

export default series(clean, optimize);
